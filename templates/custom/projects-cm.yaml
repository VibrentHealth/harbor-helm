{{- $root := . -}}
{{- range $project := .Values.custom.projects }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $project.name}}-project-cm
data:
  projects.sh: |
   #!/usr/bin/env bash

    # exit when any command fails
    set -e

    coreHostUrl={{ $root.Values.expose.ingress.hosts.core }}
    basicAuthCreds="${HARBOR_ADMIN_USERNAME}:${HARBOR_ADMIN_PASSWORD}"

    function isProjectExists(){
      echo "In the isProjectExists function"
      # call project API and return the value.
      res=$(curl -I HEAD "$coreHostUrl/api/projects?project_name=$1" \
      -H "accept: application/json" \
      -u "${basicAuthCreds}" )
      echo "response: " $res
    }

    function createProject() {
       echo "In the createProject function"
      # call Project API and create the project with the values taken from the values yaml
      project=$(curl -X POST "$coreHostUrl/api/projects" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -u "${basicAuthCreds}" \
      -d "{ \"project_name\": \"$1\"}")
      echo "Project created : ${project}"
      echo ${project}
    }

    function updateProjectWithMemberGroup() {
      echo "In the updateProjectWithMemberGroup function"
      projectName={{ $project.name | quote }}

      name=$(IFS=$',' && echo $1 | awk -F ':' '{print $1}')
      role_id=$(IFS=$',' && echo $1 | awk -F ':' '{print $2}')

      echo "Name : $name"
      echo "role_id : $role_id"

      # Get projecid for the given projectname.
      projectID=$(curl -X GET "$coreHostUrl/api/projects?name=$projectName" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -u "${basicAuthCreds}"  | jq '.[].project_id ')

      echo "Project ID : ${projectID}"

      # Get member id for the given group
      memberID=$(curl -X GET "$coreHostUrl/api/usergroups" \
      -H "accept: application/json" \
      -u "${basicAuthCreds}" \
      --silent | jq '.[]? | select(.group_name=='\"${name}\"') | .id')

      echo "Member ID : ${memberID}"

      # Updating project with member id
      echo "Updating project ${projectID} with ${memberID} "
      resp=$(curl -X POST "$coreHostUrl/api/projects/${projectID}/members" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -u "${basicAuthCreds}" \
      -d "{\"role_id\":$role_id},\"member_group\":{\"group_type\":3,\"group_name\":\"${name}\"}}")

      echo "{\"role_id\":$role_id},\"member_group\":{\"group_type\":3,\"group_name\":${name}}"
      echo "Project ${projectID} updated with member group $role_id and response is $resp"
    }

    function main() {
      echo "running in namespace: ${NAMESPACE}"
      projectName={{ $project.name | quote }}

      if [[ $(isProjectExists $projectName)  == *"404"* ]]; then
         createProject $projectName
      fi

      groupDetails=""
      {{- range $group := $project.groups }}
        groupDetails+={{ $group.name | quote }}
        groupDetails+=":"
        groupDetails+={{ $group.role | quote }}
        groupDetails+=";"
      {{ end }}

      echo $groupDetails
      totalCount=$(echo $groupDetails | awk -F ";" '{print NF}')
      echo "Total Group : " $totalCount
      IFS=$',' && echo $groupDetails | awk -v totalValues="$totalCount" -F ";" '{for (i=1;i<totalValues;i++)print $i}' | while read line; do updateProjectWithMemberGroup $line; done
    }
    main
---
  {{ end }}