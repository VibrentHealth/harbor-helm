{{- $root := . -}}
{{- range $project := .Values.custom.projects }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: configure-project-{{ $project.name}}
data:
  projects.sh: |
   #!/usr/bin/env bash
    # exit when any command fails
    set -e

    coreHostUrl={{ $root.Values.expose.ingress.hosts.core }}
    basicAuthCreds="${HARBOR_ADMIN_USERNAME}:${HARBOR_ADMIN_PASSWORD}"
    declare -A mroles
    {{- range $roles := $root.Values.roles }}
    mroles[{{ $roles.name }}]={{ $roles.id }}
    {{ end }}

    function isProjectExists(){
      echo "In the isProjectExists function"
      # call project API and return the value.
      res=$(curl -I HEAD "$coreHostUrl/api/v2.0/projects?project_name=$1" \
      -H "accept: application/json" \
      -u "${basicAuthCreds}" )
      echo "Info logs : response :: " ${res}
      echo ${res}
    }

    function createProject() {
       echo "In the createProject function"
      # call Project API and create the project with the values taken from the values yaml
      project=$(curl -X POST "$coreHostUrl/api/v2.0/projects" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -u "${basicAuthCreds}" \
      -d "{ \"project_name\": \"$1\"}")
      echo "Info logs : Project created :: ${project}"
      echo ${project}
    }

    function updateProjectWithMemberGroup() {
      echo "In the updateProjectWithMemberGroup function"
      projectName={{ $project.name | quote }}
      echo " ------------- Info logs --------------------"
      grpName=$(IFS=$',' && echo $1 | awk -F ':' '{print $1}')
      grpRole=$(IFS=$',' && echo $1 | awk -F ':' '{print $2}')
      echo "grpName : $grpName"
      echo "grpRole : $grpRole"
      echo "projectName : $projectName"
      echo " ------------- Info logs --------------------"

      # Get projecid for the given projectname.
      projectID=$(curl -X GET "$coreHostUrl/api/v2.0/projects?name=$projectName" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -u "${basicAuthCreds}" \
      | jq '.[]? | select(.name=='\"${projectName}\"') | .project_id' )

      echo "Info logs : Project ID for ${projectName} :: ${projectID}"
      echo "Info logs :  Adding group ${grpName} to project ${projectID} with grpRole $grpRole"

      # Updating project with member id
      resp=$(curl -X POST "$coreHostUrl/api/v2.0/projects/${projectID}/members" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -u "${basicAuthCreds}" \
      -d "{
            \"role_id\": ${mroles[$grpRole]},
            \"member_group\":
                {\"group_type\":3,
                \"group_name\":\"${grpName}\"
                }
           } ")

      echo "Info logs : Project ${projectID} updated with member group $grpRole and response is $resp"
    }

    function main() {
      echo "Info logs : running in namespace: ${NAMESPACE}"
      echo "Info logs : Bash version ::::: $(bash --version)"
      projectName={{ $project.name | quote }}

      if [[ $(isProjectExists $projectName)  == *"404"* ]]; then
         createProject $projectName
      fi

      groupDetails=""
      {{- range $group := $project.groups }}
      groupDetails+={{ $group.name | quote }}
      groupDetails+=":"
      groupDetails+={{ $group.role | quote }}
      groupDetails+=";"
      {{ end }}

      echo "Info logs : $groupDetails "
      totalCount=$(echo $groupDetails | awk -F ";" '{print NF}')
      echo "Info logs : Total Group : " $totalCount
      IFS=$',' && echo $groupDetails | awk -v totalValues="$totalCount" -F ";" '{for (i=1;i<totalValues;i++)print $i}' | while read line; do updateProjectWithMemberGroup $line; done
    }
    main
---
  {{ end }}