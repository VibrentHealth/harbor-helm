{{- range .Values.projects }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-{{ .name}}
  labels:
    app: harbor-helper
    service: harbor-helper
data:
  harbor.sh: |
    #!/usr/bin/env bash

    # exit when any command fails
    set -e

    function isProjectExists(){
      # call project API and return the value.
      curl -I HEAD "${base_url}/api/projects?project_name=${PROEJCT_NAME}" -H "accept: application/json" -u "${HARBOR_USER_NAME}":"${HARBOR_PASSWORD}"
    }

    function createProject() {
      # call Project API and create the project with the values taken from the values yaml
      project=curl -X POST "${base_url}/api/projects" -H "accept: application/json" -H "Content-Type: application/json" -u "${HARBOR_USER_NAME}":"${HARBOR_PASSWORD}" -d "{ \"project_name\": \"project01\"}"
      echo "Project created : ${project}"
    }

    function updateProjectWithMemberGroup() {
      # Get projecid for the given projectname.
      projectID=curl -X GET "${base_url}/api/projects?name=${PROEJCT_NAME}" -H "accept: application/json" -H "Content-Type: application/json"-u "${HARBOR_USER_NAME}":"${HARBOR_PASSWORD}"  | jq '.[].project_id '
      echo "Project ID : ${projectID}"

      # Get member id for the given group
      memberID=curl -X GET "${base_url}/api/usergroups" -H "accept: application/json" -u "${HARBOR_USER_NAME}":"${HARBOR_PASSWORD}" | jq '.[] | map(select(.group_name == '${AD-GRP-NAME}') | .id)'
      echo "Member ID : ${memberID}"

      # Updating project with member id
      echo "Updating project ${projectID} with ${memberID} "
      curl -X PUT "${base_url}/api/projects/${projectID}/members/${memberID}" -H "accept: application/json" -H "Content-Type: application/json" -u "${HARBOR_USER_NAME}":"${HARBOR_PASSWORD}" -d "{ \"role_id\": "${ROLE_ID}}"}"
    }

    function main() {
      echo "running in namespace: ${NAMESPACE}"
      if isProjectExists == '404' then
        createProject
      fi
      updateProjectWithMemberGroup
    }
    main
  {{ end }}